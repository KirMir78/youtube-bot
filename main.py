import os
import logging
import re
import asyncio
import yt_dlp
import tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ChatMemberStatus
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
import contextlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHAT_VIP = -1001699007474
SUBSCRIPTION_CHANNEL = "https://t.me/showyourmoms"
MAX_FILE_SIZE = 1800 * 1024 * 1024  # 1.8 –ì–ë –≤ –±–∞–π—Ç–∞—Ö
MAX_CONCURRENT_DOWNLOADS = 3
DOWNLOAD_TIMEOUT = 30 * 60  # 30 –º–∏–Ω—É—Ç
MAX_VIDEO_DURATION = 7200  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot_errors.log")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
try:
    with open('BotToken.ZB') as TOKENF:
        API_TOKEN = TOKENF.read().strip()
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
download_semaphore = asyncio.Semaphore(MAX_CONCURRENT_DOWNLOADS)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DownloadStates(StatesGroup):
    PROCESSING_URL = State()

# –£—Ç–∏–ª–∏—Ç—ã
def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    if not seconds:
        return "00:00"
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}" if hours else f"{minutes:02d}:{seconds:02d}"

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        chat_member = await bot.get_chat_member(chat_id=CHAT_VIP, user_id=user_id)
        return chat_member.status in [
            ChatMemberStatus.MEMBER, 
            ChatMemberStatus.ADMINISTRATOR, 
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def get_best_video_format(info: dict) -> dict:
    """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∏–¥–µ–æ—Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    best_format = None
    for f in info.get('formats', []):
        if f.get('filesize') and f['filesize'] <= MAX_FILE_SIZE:
            if f.get('vcodec') != 'none' and f.get('acodec') != 'none':
                # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞–º —Å –∞—É–¥–∏–æ
                if not best_format or f.get('quality', 0) > best_format.get('quality', 0):
                    best_format = f
    return best_format

def get_best_audio_format(info: dict) -> dict:
    """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–∞"""
    best_format = None
    for f in info.get('formats', []):
        if f.get('filesize') and f['filesize'] <= MAX_FILE_SIZE:
            if f.get('vcodec') == 'none' and f.get('acodec') != 'none':
                # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
                if not best_format or f.get('abr', 0) > best_format.get('abr', 0):
                    best_format = f
    return best_format

@contextlib.asynccontextmanager
async def async_timeout(seconds: int):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        yield
        await asyncio.sleep(0)
    except asyncio.CancelledError:
        raise TimeoutError(f"Operation timed out after {seconds} seconds")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup()
    subscribe_button = InlineKeyboardButton(
        text="üëÄ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", 
        url=SUBSCRIPTION_CHANNEL
    )
    keyboard.add(subscribe_button)
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ —Å YouTube. "
        f"<a href='{SUBSCRIPTION_CHANNEL}'>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</a> "
        "–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.message_handler(regexp=r'^https?://(?:www\.)?(?:youtube\.com|youtu\.be)/.+')
async def handle_youtube_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫"""
    user = message.from_user
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user.id):
        keyboard = InlineKeyboardMarkup()
        subscribe_button = InlineKeyboardButton(
            text="üëÄ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", 
            url=SUBSCRIPTION_CHANNEL
        )
        keyboard.add(subscribe_button)
        return await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=keyboard
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏ —Å—Ç—Ä–∏–º—ã
    if 'list=' in url or 'live' in url:
        return await message.reply("‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏ —Å—Ç—Ä–∏–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await DownloadStates.PROCESSING_URL.set()
    async with state.proxy() as data:
        data['url'] = url
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
    temp_msg = await message.reply("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'noplaylist': True,
            'ignoreerrors': True
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ live-—Å—Ç—Ä–∏–º
            if info.get('is_live'):
                return await temp_msg.edit_text("‚ö†Ô∏è Live-—Å—Ç—Ä–∏–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = info.get('duration', 0)
            if duration > MAX_VIDEO_DURATION:
                return await temp_msg.edit_text(f"‚ö†Ô∏è –í–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ {format_duration(MAX_VIDEO_DURATION)} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            title = info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:255]
            views = info.get('view_count', 0)
            upload_date = info.get('upload_date', '')
            channel = info.get('channel', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:100]
            thumbnail_url = info.get('thumbnail', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            formatted_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            if upload_date and len(upload_date) == 8:  # YYYYMMDD
                try:
                    formatted_date = datetime.strptime(upload_date, '%Y%m%d').strftime('%Y-%m-%d')
                except ValueError:
                    formatted_date = upload_date
            
            caption = (
                f"<b>{title}</b>\n\n"
                f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {format_number_with_spaces(views)}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {formatted_date}\n"
                f"üë§ –ö–∞–Ω–∞–ª: {channel}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration)}"
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = InlineKeyboardMarkup(row_width=1)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            video_format = get_best_video_format(info)
            audio_format = get_best_audio_format(info)
            
            if video_format:
                size_mb = video_format['filesize'] / (1024 * 1024)
                keyboard.add(InlineKeyboardButton(
                    text=f"üé• –í–∏–¥–µ–æ ({video_format.get('resolution', 'unknown')}) - {size_mb:.1f}MB",
                    callback_data=f"video:{video_format['format_id']}"
                ))
            
            if audio_format:
                size_mb = audio_format['filesize'] / (1024 * 1024)
                keyboard.add(InlineKeyboardButton(
                    text=f"üîä –ê—É–¥–∏–æ ({audio_format.get('abr', 0)}kbps) - {size_mb:.1f}MB",
                    callback_data=f"audio:{audio_format['format_id']}"
                ))
            
            if not video_format and not audio_format:
                return await temp_msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await temp_msg.delete()
            await message.reply_photo(
                photo=thumbnail_url,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except yt_dlp.utils.DownloadError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await temp_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
    except Exception as e:
        logger.exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL")
        await temp_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.finish()

async def download_and_send_media(user_id: int, url: str, format_id: str, media_type: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫"""
    with tempfile.TemporaryDirectory() as temp_dir:
        ydl_opts = {
            'format': format_id,
            'outtmpl': os.path.join(temp_dir, '%(id)s.%(ext)s'),
            'quiet': True,
            'no_warnings': True,
            'socket_timeout': 30,
            'noprogress': True,
            'max_filesize': MAX_FILE_SIZE,
            'merge_output_format': 'mp4' if media_type == 'video' else 'mp3'
        }
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                loop = asyncio.get_running_loop()
                info = await loop.run_in_executor(None, lambda: ydl.extract_info(url, download=True))
                
                # –ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                file_path = ydl.prepare_filename(info)
                if not os.path.exists(file_path):
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É
                    for f in os.listdir(temp_dir):
                        if f.startswith(info['id']):
                            file_path = os.path.join(temp_dir, f)
                            break
                    else:
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                file_size = os.path.getsize(file_path)
                if file_size > MAX_FILE_SIZE:
                    return "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞
                with open(file_path, 'rb') as file:
                    if media_type == 'video':
                        await bot.send_video(user_id, InputFile(file))
                    else:
                        await bot.send_audio(user_id, InputFile(file))
                
                return "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            
        except yt_dlp.utils.DownloadError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ"
        except yt_dlp.utils.FileTooLarge:
            return "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞"

@dp.callback_query_handler(lambda c: c.data.startswith(('video:', 'audio:')))
async def handle_media_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user = callback_query.from_user
    media_type, format_id = callback_query.data.split(':')
    
    await bot.answer_callback_query(callback_query.id)
    status_msg = await bot.send_message(user.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")
    
    try:
        async with download_semaphore:
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            url = data.get('url')
            
            if not url:
                return await status_msg.edit_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            download_task = asyncio.create_task(
                download_and_send_media(user.id, url, format_id, media_type)
            )
            
            try:
                result = await asyncio.wait_for(download_task, timeout=DOWNLOAD_TIMEOUT)
            except asyncio.TimeoutError:
                download_task.cancel()
                raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏")
                
            await status_msg.edit_text(result)
            
    except TimeoutError:
        await status_msg.edit_text("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await status_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        await state.finish()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("downloads", exist_ok=True)
    executor.start_polling(dp, skip_updates=True)
